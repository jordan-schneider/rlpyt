from gym import Wrapper
from rlpyt.envs.base import EnvSpaces as EnvSpaces, EnvStep as EnvStep
from rlpyt.spaces.gym_wrapper_schema import GymSpaceWrapper as GymSpaceWrapper
from rlpyt.utils.collections import NamedTupleSchema as NamedTupleSchema
from typing import Any, Optional

class GymEnvWrapper(Wrapper):
    action_space: Any = ...
    observation_space: Any = ...
    def __init__(self, env: Any, act_null_value: int = ..., obs_null_value: int = ..., force_float32: bool = ...) -> None: ...
    def step(self, action: Any): ...
    def reset(self): ...
    @property
    def spaces(self): ...

def info_to_nt(value: Any, schemas: Any, name: str = ...): ...

class EnvInfoWrapper(Wrapper):
    def __init__(self, env: Any, info_example: Any) -> None: ...
    def step(self, action: Any): ...

def infill_info(info: Any, sometimes_info: Any): ...
def make(*args: Any, info_example: Optional[Any] = ..., **kwargs: Any): ...
