from rlpyt.distributions.base import Distribution as Distribution
from rlpyt.utils.collections import namedarraytuple as namedarraytuple
from rlpyt.utils.tensor import valid_mean as valid_mean
from typing import Any, Optional

EPS: float
DistInfo: Any
DistInfoStd: Any

class Gaussian(Distribution):
    clip: Any = ...
    noise_clip: Any = ...
    min_std: Any = ...
    max_std: Any = ...
    min_log_std: Any = ...
    max_log_std: Any = ...
    squash: Any = ...
    def __init__(self, dim: Any, std: Optional[Any] = ..., clip: Optional[Any] = ..., noise_clip: Optional[Any] = ..., min_std: Optional[Any] = ..., max_std: Optional[Any] = ..., squash: Optional[Any] = ...) -> None: ...
    @property
    def dim(self): ...
    def kl(self, old_dist_info: Any, new_dist_info: Any): ...
    def mean_kl(self, old_dist_info: Any, new_dist_info: Any, valid: Optional[Any] = ...): ...
    def entropy(self, dist_info: Any): ...
    def perplexity(self, dist_info: Any): ...
    def mean_entropy(self, dist_info: Any, valid: Optional[Any] = ...): ...
    def mean_perplexity(self, dist_info: Any, valid: Optional[Any] = ...): ...
    def log_likelihood(self, x: Any, dist_info: Any): ...
    def likelihood_ratio(self, x: Any, old_dist_info: Any, new_dist_info: Any): ...
    def sample_loglikelihood(self, dist_info: Any): ...
    def sample(self, dist_info: Any): ...
    def set_clip(self, clip: Any) -> None: ...
    def set_squash(self, squash: Any) -> None: ...
    def set_noise_clip(self, noise_clip: Any) -> None: ...
    std: Any = ...
    def set_std(self, std: Any) -> None: ...
