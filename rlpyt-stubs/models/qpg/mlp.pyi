import torch
from rlpyt.models.mlp import MlpModel as MlpModel
from rlpyt.utils.tensor import infer_leading_dims as infer_leading_dims, restore_leading_dims as restore_leading_dims
from typing import Any, Optional

class MuMlpModel(torch.nn.Module):
    mlp: Any = ...
    def __init__(self, observation_shape: Any, hidden_sizes: Any, action_size: Any, output_max: int = ...) -> None: ...
    def forward(self, observation: Any, prev_action: Any, prev_reward: Any): ...

class PiMlpModel(torch.nn.Module):
    mlp: Any = ...
    def __init__(self, observation_shape: Any, hidden_sizes: Any, action_size: Any) -> None: ...
    def forward(self, observation: Any, prev_action: Any, prev_reward: Any): ...

class QofMuMlpModel(torch.nn.Module):
    mlp: Any = ...
    def __init__(self, observation_shape: Any, hidden_sizes: Any, action_size: Any) -> None: ...
    def forward(self, observation: Any, prev_action: Any, prev_reward: Any, action: Any): ...

class VMlpModel(torch.nn.Module):
    mlp: Any = ...
    def __init__(self, observation_shape: Any, hidden_sizes: Any, action_size: Optional[Any] = ...) -> None: ...
    def forward(self, observation: Any, prev_action: Any, prev_reward: Any): ...
