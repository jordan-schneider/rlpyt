import torch
from rlpyt.models.conv2d import Conv2dModel as Conv2dModel
from rlpyt.models.dqn.dueling import DuelingHeadModel as DuelingHeadModel
from rlpyt.models.mlp import MlpModel as MlpModel
from rlpyt.utils.tensor import infer_leading_dims as infer_leading_dims, restore_leading_dims as restore_leading_dims
from typing import Any, Optional

class AtariDqnModel(torch.nn.Module):
    dueling: Any = ...
    conv: Any = ...
    head: Any = ...
    def __init__(self, image_shape: Any, output_size: Any, fc_sizes: int = ..., dueling: bool = ..., use_maxpool: bool = ..., channels: Optional[Any] = ..., kernel_sizes: Optional[Any] = ..., strides: Optional[Any] = ..., paddings: Optional[Any] = ...) -> None: ...
    def forward(self, observation: Any, prev_action: Any, prev_reward: Any): ...
