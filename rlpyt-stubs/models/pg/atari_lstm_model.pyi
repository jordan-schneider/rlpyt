import torch.nn.functional
from rlpyt.models.conv2d import Conv2dHeadModel as Conv2dHeadModel
from rlpyt.utils.collections import namedarraytuple as namedarraytuple
from rlpyt.utils.tensor import infer_leading_dims as infer_leading_dims, restore_leading_dims as restore_leading_dims
from typing import Any, Optional

RnnState: Any

class AtariLstmModel(torch.nn.Module):
    conv: Any = ...
    lstm: Any = ...
    pi: Any = ...
    value: Any = ...
    def __init__(self, image_shape: Any, output_size: Any, fc_sizes: int = ..., lstm_size: int = ..., use_maxpool: bool = ..., channels: Optional[Any] = ..., kernel_sizes: Optional[Any] = ..., strides: Optional[Any] = ..., paddings: Optional[Any] = ...) -> None: ...
    def forward(self, image: Any, prev_action: Any, prev_reward: Any, init_rnn_state: Any): ...
