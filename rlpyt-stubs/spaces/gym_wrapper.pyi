from rlpyt.spaces.composite import Composite as Composite
from rlpyt.utils.collections import is_namedtuple as is_namedtuple, is_namedtuple_class as is_namedtuple_class
from typing import Any, Optional

class GymSpaceWrapper:
    space: Any = ...
    def __init__(self, space: Any, null_value: int = ..., name: str = ..., force_float32: bool = ...) -> None: ...
    def sample(self): ...
    def null_value(self): ...
    def convert(self, value: Any): ...
    def revert(self, value: Any): ...
    @property
    def dtype(self): ...
    @property
    def shape(self): ...
    def contains(self, x: Any): ...
    def __eq__(self, other: Any) -> Any: ...
    @property
    def low(self): ...
    @property
    def high(self): ...
    @property
    def n(self): ...
    def seed(self, seed: Optional[Any] = ...): ...

def dict_to_nt(value: Any, name: Any): ...
def nt_to_dict(value: Any): ...
