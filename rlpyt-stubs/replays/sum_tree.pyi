from rlpyt.utils.buffer import np_mp_array as np_mp_array
from typing import Any, Optional

class SumTree:
    async_: bool = ...
    T: Any = ...
    B: Any = ...
    size: Any = ...
    off_backward: Any = ...
    off_forward: Any = ...
    default_value: Any = ...
    input_priority_shift: Any = ...
    tree_levels: Any = ...
    low_idx: Any = ...
    high_idx: Any = ...
    priorities: Any = ...
    input_priorities: Any = ...
    def __init__(self, T: Any, B: Any, off_backward: Any, off_forward: Any, default_value: int = ..., enable_input_priorities: bool = ..., input_priority_shift: int = ...) -> None: ...
    t: int = ...
    def reset(self) -> None: ...
    def advance(self, T: Any, priorities: Optional[Any] = ...) -> None: ...
    prev_tree_idxs: Any = ...
    def sample(self, n: Any, unique: bool = ...): ...
    def update_batch_priorities(self, priorities: Any) -> None: ...
    def print_tree(self, level: Optional[Any] = ...) -> None: ...
    def reconstruct(self, tree_idxs: Any, values: Any) -> None: ...
    def reconstruct_advance(self, low_on_t: Any, high_on_t: Any, low_off_t: Any, high_off_t: Any) -> None: ...
    def propagate_diffs(self, tree_idxs: Any, diffs: Any, min_level: int = ...) -> None: ...
    def find(self, random_values: Any): ...

class AsyncSumTree(SumTree):
    async_: bool = ...
    async_t: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def reset(self) -> None: ...
    t: Any = ...
    def advance(self, *args: Any, **kwargs: Any) -> None: ...
