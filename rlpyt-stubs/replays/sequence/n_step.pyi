from rlpyt.replays.n_step import BaseNStepReturnBuffer as BaseNStepReturnBuffer
from rlpyt.utils.buffer import buffer_from_example as buffer_from_example, buffer_func as buffer_func, torchify_buffer as torchify_buffer
from rlpyt.utils.collections import namedarraytuple as namedarraytuple
from rlpyt.utils.misc import extract_sequences as extract_sequences
from typing import Any, Optional

SamplesFromReplay: Any
SamplesToBuffer: Any

class SequenceNStepReturnBuffer(BaseNStepReturnBuffer):
    rnn_state_interval: Any = ...
    batch_T: Any = ...
    samples_prev_rnn_state: Any = ...
    rnn_T: Any = ...
    def __init__(self, example: Any, size: Any, B: Any, rnn_state_interval: Any, batch_T: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def append_samples(self, samples: Any): ...
    def extract_batch(self, T_idxs: Any, B_idxs: Any, T: Any): ...
    def extract_observation(self, T_idxs: Any, B_idxs: Any, T: Any): ...
