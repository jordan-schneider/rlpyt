from rlpyt.replays.async_ import AsyncReplayBufferMixin as AsyncReplayBufferMixin
from rlpyt.replays.non_sequence.n_step import NStepReturnBuffer as NStepReturnBuffer, SamplesFromReplay as SamplesFromReplay
from rlpyt.replays.sum_tree import AsyncSumTree as AsyncSumTree, SumTree as SumTree
from rlpyt.utils.buffer import numpify_buffer as numpify_buffer, torchify_buffer as torchify_buffer
from rlpyt.utils.collections import namedarraytuple as namedarraytuple
from rlpyt.utils.quick_args import save__init__args as save__init__args
from typing import Any

EPS: float
SamplesFromReplayPri: Any

class PrioritizedReplay:
    def __init__(self, alpha: float = ..., beta: float = ..., default_priority: int = ..., unique: bool = ..., input_priorities: bool = ..., input_priority_shift: int = ..., **kwargs: Any) -> None: ...
    priority_tree: Any = ...
    def init_priority_tree(self) -> None: ...
    beta: Any = ...
    def set_beta(self, beta: Any) -> None: ...
    def append_samples(self, samples: Any): ...
    def sample_batch(self, batch_B: Any): ...
    def update_batch_priorities(self, priorities: Any) -> None: ...

class PrioritizedReplayBuffer(PrioritizedReplay, NStepReturnBuffer): ...
class AsyncPrioritizedReplayBuffer(AsyncReplayBufferMixin, PrioritizedReplayBuffer): ...
