import json
from rlpyt.utils.logging.autoargs import get_all_parameters as get_all_parameters
from rlpyt.utils.logging.console import colorize as colorize, mkdir_p as mkdir_p
from rlpyt.utils.logging.tabulate import tabulate as tabulate
from typing import Any, Optional

def disable() -> None: ...
def disable_tabular() -> None: ...
def enable() -> None: ...
def enable_tabular() -> None: ...
def set_iteration(iteration: Any) -> None: ...
def push_prefix(prefix: Any) -> None: ...
def add_text_output(file_name: Any) -> None: ...
def remove_text_output(file_name: Any) -> None: ...
def add_tabular_output(file_name: Any) -> None: ...
def remove_tabular_output(file_name: Any) -> None: ...
def hold_tabular_output(file_name: Any) -> None: ...
def set_snapshot_dir(dir_name: Any) -> None: ...
def get_snapshot_dir(): ...
def set_tf_summary_dir(dir_name: Any) -> None: ...
def get_tf_summary_dir(): ...
def set_tf_summary_writer(writer_name: Any) -> None: ...
def get_tf_summary_writer(): ...
def get_snapshot_mode(): ...
def set_snapshot_mode(mode: Any) -> None: ...
def get_snapshot_gap(): ...
def set_snapshot_gap(gap: Any) -> None: ...
def set_log_tabular_only(log_tabular_only: Any) -> None: ...
def get_log_tabular_only(): ...
def set_disable_prefix(disable_prefix: Any) -> None: ...
def get_disable_prefix(): ...
def log(s: Any, with_prefix: bool = ..., with_timestamp: bool = ..., color: Optional[Any] = ...) -> None: ...
def record_tabular(key: Any, val: Any, *args: Any, **kwargs: Any) -> None: ...
def push_tabular_prefix(key: Any) -> None: ...
def pop_tabular_prefix() -> None: ...
def prefix(key: Any) -> None: ...
def tabular_prefix(key: Any) -> None: ...

class TerminalTablePrinter:
    headers: Any = ...
    tabulars: Any = ...
    def __init__(self) -> None: ...
    def print_tabular(self, new_tabular: Any) -> None: ...
    def refresh(self) -> None: ...

table_printer: Any

def dump_tabular(*args: Any, **kwargs: Any) -> None: ...
def pop_prefix() -> None: ...
def save_itr_params(itr: Any, params: Any) -> None: ...
def log_parameters(log_file: Any, args: Any, classes: Any) -> None: ...
def stub_to_json(stub_sth: Any): ...

class MyEncoder(json.JSONEncoder):
    def default(self, o: Any): ...

def log_parameters_lite(log_file: Any, args: Any) -> None: ...
def log_variant(log_file: Any, variant_data: Any) -> None: ...
def record_tabular_misc_stat(key: Any, values: Any, placement: str = ...) -> None: ...
