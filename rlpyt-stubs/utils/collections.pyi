from typing import Any

RESERVED_NAMES: Any

def tuple_itemgetter(i: Any): ...
def namedarraytuple(typename: Any, field_names: Any, return_namedtuple_cls: bool = ..., classname_suffix: bool = ...): ...

DocExampleNat: Any

def is_namedtuple_class(obj: Any): ...
def is_namedarraytuple_class(obj: Any): ...
def is_namedtuple(obj: Any): ...
def is_namedarraytuple(obj: Any): ...
def namedarraytuple_like(namedtuple_or_class: Any, classname_suffix: bool = ...): ...

class AttrDict(dict):
    __dict__: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def copy(self): ...

class NamedTupleSchema:
    def __init__(self, typename: Any, fields: Any) -> None: ...
    def __call__(self, *args: Any, **kwargs: Any): ...
    def __setattr__(self, name: Any, value: Any) -> None: ...

class NamedTuple(tuple):
    def __new__(cls, typename: Any, fields: Any, values: Any): ...
    def __getattr__(self, name: Any): ...
    def __setattr__(self, name: Any, value: Any) -> None: ...
    def __getnewargs__(self): ...

class NamedArrayTupleSchema(NamedTupleSchema):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...

class NamedArrayTuple(NamedTuple):
    def __getitem__(self, loc: Any): ...
    def __setitem__(self, loc: Any, value: Any) -> None: ...
    def __contains__(self, key: Any): ...
    def get(self, index: Any): ...
    def items(self) -> None: ...

def NamedArrayTupleSchema_like(example: Any): ...
