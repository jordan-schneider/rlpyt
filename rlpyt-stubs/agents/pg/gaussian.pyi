from rlpyt.agents.base import AgentStep as AgentStep, AlternatingRecurrentAgentMixin as AlternatingRecurrentAgentMixin, BaseAgent as BaseAgent, RecurrentAgentMixin as RecurrentAgentMixin
from rlpyt.agents.pg.base import AgentInfo as AgentInfo, AgentInfoRnn as AgentInfoRnn
from rlpyt.distributions.gaussian import DistInfoStd as DistInfoStd, Gaussian as Gaussian
from rlpyt.utils.buffer import buffer_func as buffer_func, buffer_method as buffer_method, buffer_to as buffer_to
from typing import Any, Optional

class GaussianPgAgent(BaseAgent):
    def __call__(self, observation: Any, prev_action: Any, prev_reward: Any): ...
    distribution: Any = ...
    def initialize(self, env_spaces: Any, share_memory: bool = ..., global_B: int = ..., env_ranks: Optional[Any] = ...) -> None: ...
    def step(self, observation: Any, prev_action: Any, prev_reward: Any): ...
    def value(self, observation: Any, prev_action: Any, prev_reward: Any): ...

class RecurrentGaussianPgAgentBase(BaseAgent):
    def __call__(self, observation: Any, prev_action: Any, prev_reward: Any, init_rnn_state: Any): ...
    distribution: Any = ...
    def initialize(self, env_spaces: Any, share_memory: bool = ..., global_B: int = ..., env_ranks: Optional[Any] = ...) -> None: ...
    def step(self, observation: Any, prev_action: Any, prev_reward: Any): ...
    def value(self, observation: Any, prev_action: Any, prev_reward: Any): ...

class RecurrentGaussianPgAgent(RecurrentAgentMixin, RecurrentGaussianPgAgentBase): ...
class AlternatingRecurrentGaussianPgAgent(AlternatingRecurrentAgentMixin, RecurrentGaussianPgAgentBase): ...
