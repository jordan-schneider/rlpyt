# Stubs for rlpyt.agents.qpg.sac_v_agent (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from collections import namedtuple
from rlpyt.agents.base import BaseAgent
from typing import Any, Optional

MIN_LOG_STD: int
MAX_LOG_STD: int
AgentInfo: Any

Models = namedtuple('Models', ['pi', 'q1', 'q2', 'v'])

class SacAgent(BaseAgent):
    min_itr_learn: int = ...
    def __init__(self, ModelCls: Any = ..., QModelCls: Any = ..., VModelCls: Any = ..., model_kwargs: Optional[Any] = ..., q_model_kwargs: Optional[Any] = ..., v_model_kwargs: Optional[Any] = ..., initial_model_state_dict: Optional[Any] = ..., action_squash: float = ..., pretrain_std: float = ...) -> None: ...
    initial_model_state_dict: Any = ...
    q1_model: Any = ...
    q2_model: Any = ...
    v_model: Any = ...
    target_v_model: Any = ...
    distribution: Any = ...
    def initialize(self, env_spaces: Any, share_memory: bool = ..., global_B: int = ..., env_ranks: Optional[Any] = ...) -> None: ...
    def to_device(self, cuda_idx: Optional[Any] = ...) -> None: ...
    def data_parallel(self) -> None: ...
    def give_min_itr_learn(self, min_itr_learn: Any) -> None: ...
    def make_env_to_model_kwargs(self, env_spaces: Any): ...
    def q(self, observation: Any, prev_action: Any, prev_reward: Any, action: Any): ...
    def v(self, observation: Any, prev_action: Any, prev_reward: Any): ...
    def pi(self, observation: Any, prev_action: Any, prev_reward: Any): ...
    def target_v(self, observation: Any, prev_action: Any, prev_reward: Any): ...
    def step(self, observation: Any, prev_action: Any, prev_reward: Any): ...
    def update_target(self, tau: int = ...) -> None: ...
    @property
    def models(self): ...
    def pi_parameters(self): ...
    def q1_parameters(self): ...
    def q2_parameters(self): ...
    def v_parameters(self): ...
    def train_mode(self, itr: Any) -> None: ...
    def sample_mode(self, itr: Any) -> None: ...
    def eval_mode(self, itr: Any) -> None: ...
    def state_dict(self): ...
    def load_state_dict(self, state_dict: Any) -> None: ...
