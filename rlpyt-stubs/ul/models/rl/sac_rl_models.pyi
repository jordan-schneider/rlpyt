import torch.nn.functional as nn
from rlpyt.models.conv2d import Conv2dModel as Conv2dModel
from rlpyt.models.mlp import MlpModel as MlpModel
from rlpyt.utils.tensor import infer_leading_dims as infer_leading_dims, restore_leading_dims as restore_leading_dims
from typing import Any, Optional

def weight_init(m: Any) -> None: ...

class SacModel(nn.Module):
    conv: Any = ...
    pi_fc1: Any = ...
    pi_mlp: Any = ...
    def __init__(self, conv: Any, pi_fc1: Any, pi_mlp: Any) -> None: ...
    def forward(self, observation: Any, prev_action: Any, prev_reward: Any): ...

class SacConvModel(nn.Module):
    conv: Any = ...
    def __init__(self, image_shape: Any, channels: Optional[Any] = ..., kernel_sizes: Optional[Any] = ..., strides: Optional[Any] = ..., paddings: Optional[Any] = ..., final_nonlinearity: bool = ...) -> None: ...
    def forward(self, observation: Any): ...
    @property
    def output_shape(self): ...
    @property
    def output_size(self): ...

class SacFc1Model(nn.Module):
    linear: Any = ...
    layer_norm: Any = ...
    def __init__(self, input_size: Any, latent_size: Any, layer_norm: bool = ...) -> None: ...
    def forward(self, conv_out: Any): ...
    @property
    def output_size(self): ...

class SacActorModel(nn.Module):
    mlp: Any = ...
    min_log_std: Any = ...
    max_log_std: Any = ...
    def __init__(self, input_size: Any, action_size: Any, hidden_sizes: Any, min_log_std: Any = ..., max_log_std: float = ...) -> None: ...
    def forward(self, latent: Any, prev_action: Optional[Any] = ..., prev_reward: Optional[Any] = ...): ...

class SacCriticModel(nn.Module):
    mlp1: Any = ...
    mlp2: Any = ...
    def __init__(self, input_size: Any, action_size: Any, hidden_sizes: Any) -> None: ...
    def forward(self, latent: Any, action: Any, prev_action: Optional[Any] = ..., prev_reward: Optional[Any] = ...): ...

class SacNoConvModel(nn.Module):
    pi_fc1: Any = ...
    pi_mlp: Any = ...
    def __init__(self, pi_fc1: Any, pi_mlp: Any) -> None: ...
    def forward(self, observation: Any, prev_action: Any, prev_reward: Any): ...
