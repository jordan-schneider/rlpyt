import torch.nn.functional
from rlpyt.models.mlp import MlpModel as MlpModel
from rlpyt.ul.models.dmlab_conv2d import DmlabConv2dModel as DmlabConv2dModel
from rlpyt.utils.collections import namedarraytuple as namedarraytuple
from rlpyt.utils.logging import logger as logger
from rlpyt.utils.tensor import infer_leading_dims as infer_leading_dims, restore_leading_dims as restore_leading_dims
from typing import Any, Optional

RnnState: Any

def weight_init(m: Any) -> None: ...

class DmlabPgLstmModel(torch.nn.Module):
    conv: Any = ...
    fc1: Any = ...
    lstm: Any = ...
    pi_v_head: Any = ...
    stop_conv_grad: Any = ...
    def __init__(self, image_shape: Any, output_size: Any, lstm_size: Any, skip_connections: bool = ..., hidden_sizes: Optional[Any] = ..., kiaming_init: bool = ..., stop_conv_grad: bool = ..., skip_lstm: bool = ...) -> None: ...
    def forward(self, observation: Any, prev_action: Any, prev_reward: Any, init_rnn_state: Any): ...
    def parameters(self) -> None: ...
    def named_parameters(self) -> None: ...
    @property
    def conv_out_size(self): ...
