import torch.nn.functional
from rlpyt.models.mlp import MlpModel as MlpModel
from typing import Any, Optional

class VaeHeadModel(torch.nn.Module):
    head: Any = ...
    def __init__(self, latent_size: Any, action_size: Any, hidden_sizes: Any) -> None: ...
    def forward(self, h: Any, action: Optional[Any] = ...): ...

class VaeDecoderModel(torch.nn.Module):
    linear: Any = ...
    convt: Any = ...
    reshape: Any = ...
    def __init__(self, latent_size: Any, reshape: Any, channels: Optional[Any] = ..., kernel_sizes: Optional[Any] = ..., strides: Optional[Any] = ..., paddings: Optional[Any] = ..., output_paddings: Optional[Any] = ...) -> None: ...
    def forward(self, latent: Any): ...

class ConvTranspose2dModel(torch.nn.Module):
    convt: Any = ...
    def __init__(self, in_channels: Any, channels: Any, kernel_sizes: Any, strides: Any, paddings: Optional[Any] = ..., output_paddings: Optional[Any] = ..., nonlinearity: Any = ..., sigmoid_output: bool = ...) -> None: ...
    def forward(self, input: Any): ...
