import torch
from rlpyt.models.mlp import MlpModel as MlpModel
from rlpyt.utils.tensor import infer_leading_dims as infer_leading_dims, restore_leading_dims as restore_leading_dims
from typing import Any, Optional

class PixelControlModel(torch.nn.Module):
    input_shape: Any = ...
    mlp: Any = ...
    reshape: Any = ...
    dueling: Any = ...
    convt: Any = ...
    def __init__(self, input_shape: Any, fc_sizes: Any, reshape: Any, channels: Any, kernel_sizes: Any, strides: Any, paddings: Optional[Any] = ..., output_paddings: Optional[Any] = ..., dueling: bool = ...) -> None: ...
    def forward(self, input: Any): ...

class ConvTranspose2dModel(torch.nn.Module):
    convt: Any = ...
    def __init__(self, in_channels: Any, channels: Any, kernel_sizes: Any, strides: Any, paddings: Optional[Any] = ..., output_paddings: Optional[Any] = ..., nonlinearity: Any = ..., sigmoid_output: bool = ...) -> None: ...
    def forward(self, input: Any): ...
