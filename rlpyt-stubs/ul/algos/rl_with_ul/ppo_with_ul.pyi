from collections import namedtuple
from rlpyt.algos.pg.ppo import PPO as PPO
from rlpyt.algos.utils import valid_from_done as valid_from_done
from rlpyt.models.utils import update_state_dict as update_state_dict
from rlpyt.ul.algos.utils.data_augs import random_shift as random_shift
from rlpyt.ul.algos.utils.warmup_scheduler import GradualWarmupScheduler as GradualWarmupScheduler
from rlpyt.ul.models.rl.ul_models import UlEncoderModel as UlEncoderModel
from rlpyt.ul.models.ul.atc_models import ContrastModel as ContrastModel
from rlpyt.ul.replays.rl_with_ul_replay import RlWithUlPrioritizedReplayBuffer as RlWithUlPrioritizedReplayBuffer, RlWithUlUniformReplayBuffer as RlWithUlUniformReplayBuffer
from rlpyt.utils.buffer import buffer_to as buffer_to
from rlpyt.utils.collections import namedarraytuple as namedarraytuple
from rlpyt.utils.logging import logger as logger
from rlpyt.utils.quick_args import save__init__args as save__init__args
from typing import Any, Optional

IGNORE_INDEX: int

OptInfoUl = namedtuple('OptInfoUl', ['ulLoss', 'ulAccuracy', 'ulGradNorm', 'ulUpdates'])

OptInfo: AnySamplesToBuffer: Any

class PpoUl(PPO):
    opt_info_fields: Any = ...
    def __init__(self, discount: float = ..., learning_rate: float = ..., value_loss_coeff: float = ..., entropy_loss_coeff: float = ..., OptimCls: Any = ..., optim_kwargs: Optional[Any] = ..., clip_grad_norm: float = ..., initial_optim_state_dict: Optional[Any] = ..., gae_lambda: int = ..., minibatches: int = ..., epochs: int = ..., ratio_clip: float = ..., linear_lr_schedule: bool = ..., normalize_advantage: bool = ..., min_steps_rl: int = ..., min_steps_ul: int = ..., max_steps_ul: Optional[Any] = ..., ul_learning_rate: float = ..., ul_optim_kwargs: Optional[Any] = ..., ul_replay_size: float = ..., ul_update_schedule: Optional[Any] = ..., ul_lr_schedule: Optional[Any] = ..., ul_lr_warmup: int = ..., ul_delta_T: int = ..., ul_batch_B: int = ..., ul_batch_T: int = ..., ul_random_shift_prob: float = ..., ul_random_shift_pad: int = ..., ul_target_update_interval: int = ..., ul_target_update_tau: float = ..., ul_latent_size: int = ..., ul_anchor_hidden_sizes: int = ..., ul_clip_grad_norm: float = ..., ul_pri_alpha: float = ..., ul_pri_beta: float = ..., ul_pri_n_step_return: int = ..., UlEncoderCls: Any = ..., UlContrastCls: Any = ...) -> None: ...
    agent: Any = ...
    n_itr: Any = ...
    batch_spec: Any = ...
    mid_batch_reset: Any = ...
    optimizer: Any = ...
    ul_encoder: Any = ...
    ul_target_encoder: Any = ...
    ul_contrast: Any = ...
    ul_optimizer: Any = ...
    lr_scheduler: Any = ...
    min_itr_rl: Any = ...
    min_itr_ul: Any = ...
    max_itr_ul: Any = ...
    ul_lr_scheduler: Any = ...
    ul_update_counter: int = ...
    total_ul_updates: Any = ...
    c_e_loss: Any = ...
    def initialize(self, agent: Any, n_itr: Any, batch_spec: Any, mid_batch_reset: Any, examples: Any, world_size: int = ..., rank: int = ...): ...
    replay_buffer: Any = ...
    def initialize_replay_buffer(self, examples: Any, batch_spec: Any) -> None: ...
    def samples_to_buffer(self, samples: Any): ...
    def examples_to_buffer(self, examples: Any): ...
    def optimize_agent(self, itr: Any, samples: Any): ...
    def ul_optimize(self, itr: Any): ...
    def compute_ul_update_schedule(self, itr: Any): ...
    def ul_optimize_one_step(self): ...
    def ul_parameters(self) -> None: ...
    def ul_named_parameters(self) -> None: ...
