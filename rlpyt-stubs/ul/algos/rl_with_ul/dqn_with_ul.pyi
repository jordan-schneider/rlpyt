from collections import namedtuple
from rlpyt.algos.base import RlAlgorithm as RlAlgorithm
from rlpyt.algos.utils import valid_from_done as valid_from_done
from rlpyt.models.utils import update_state_dict as update_state_dict
from rlpyt.replays.non_sequence.uniform import UniformReplayBuffer as UniformReplayBuffer
from rlpyt.ul.algos.utils.data_augs import random_shift as random_shift
from rlpyt.ul.algos.utils.warmup_scheduler import GradualWarmupScheduler as GradualWarmupScheduler
from rlpyt.ul.models.rl.ul_models import UlEncoderModel as UlEncoderModel
from rlpyt.ul.models.ul.atc_models import ContrastModel as ContrastModel
from rlpyt.ul.replays.rl_with_ul_replay import DqnWithUlPrioritizedReplayFrameBuffer as DqnWithUlPrioritizedReplayFrameBuffer, DqnWithUlUniformReplayFrameBuffer as DqnWithUlUniformReplayFrameBuffer
from rlpyt.utils.buffer import buffer_to as buffer_to
from rlpyt.utils.collections import namedarraytuple as namedarraytuple
from rlpyt.utils.logging import logger as logger
from rlpyt.utils.quick_args import save__init__args as save__init__args
from rlpyt.utils.tensor import select_at_indexes as select_at_indexes, valid_mean as valid_mean
from typing import Any, Optional

IGNORE_INDEX: int

OptInfoRl = namedtuple('OptInfoRl', ['loss', 'gradNorm', 'tdAbsErr'])

OptInfoUl = namedtuple('OptInfoUl', ['ulLoss', 'ulAccuracy', 'ulGradNorm', 'ulUpdates'])

OptInfo: AnySamplesToBuffer: Any

class DqnUl(RlAlgorithm):
    opt_info_fields: Any = ...
    update_counter: int = ...
    def __init__(self, discount: float = ..., batch_size: int = ..., min_steps_rl: Any = ..., delta_clip: float = ..., replay_size: Any = ..., replay_ratio: int = ..., target_update_tau: int = ..., target_update_interval: int = ..., n_step_return: int = ..., learning_rate: float = ..., OptimCls: Any = ..., optim_kwargs: Optional[Any] = ..., initial_optim_state_dict: Optional[Any] = ..., clip_grad_norm: float = ..., eps_steps: Any = ..., double_dqn: bool = ..., prioritized_replay: bool = ..., pri_alpha: float = ..., pri_beta_init: float = ..., pri_beta_final: float = ..., pri_beta_steps: Any = ..., default_priority: Optional[Any] = ..., ReplayBufferCls: Optional[Any] = ..., updates_per_sync: int = ..., use_frame_buffer: bool = ..., min_steps_ul: Any = ..., max_steps_ul: Optional[Any] = ..., ul_learning_rate: float = ..., ul_update_schedule: Optional[Any] = ..., ul_lr_schedule: Optional[Any] = ..., ul_lr_warmup: int = ..., ul_delta_T: int = ..., ul_batch_B: int = ..., ul_batch_T: int = ..., ul_random_shift_prob: float = ..., ul_random_shift_pad: int = ..., ul_target_update_interval: int = ..., ul_target_update_tau: float = ..., ul_latent_size: int = ..., ul_anchor_hidden_sizes: int = ..., ul_clip_grad_norm: float = ..., ul_optim_kwargs: Optional[Any] = ..., UlEncoderCls: Any = ..., UlContrastCls: Any = ...) -> None: ...
    agent: Any = ...
    n_itr: Any = ...
    sampler_bs: Any = ...
    mid_batch_reset: Any = ...
    updates_per_optimize: Any = ...
    min_itr_rl: Any = ...
    min_itr_ul: Any = ...
    max_itr_ul: Any = ...
    ul_encoder: Any = ...
    ul_target_encoder: Any = ...
    ul_contrast: Any = ...
    def initialize(self, agent: Any, n_itr: Any, batch_spec: Any, mid_batch_reset: Any, examples: Any, world_size: int = ..., rank: int = ...) -> None: ...
    def async_initialize(self, agent: Any, sampler_n_itr: Any, batch_spec: Any, mid_batch_reset: Any, examples: Any, world_size: int = ...) -> None: ...
    rank: Any = ...
    optimizer: Any = ...
    pri_beta_itr: Any = ...
    ul_optimizer: Any = ...
    total_ul_updates: Any = ...
    ul_update_counter: int = ...
    ul_lr_scheduler: Any = ...
    c_e_loss: Any = ...
    def optim_initialize(self, rank: int = ...): ...
    replay_buffer: Any = ...
    def initialize_replay_buffer(self, examples: Any, batch_spec: Any, async_: bool = ...) -> None: ...
    def optimize_agent(self, itr: Any, samples: Any): ...
    def rl_optimize(self, itr: Any): ...
    def ul_optimize(self, itr: Any): ...
    def ul_optimize_one_step(self): ...
    def samples_to_buffer(self, samples: Any): ...
    def examples_to_buffer(self, examples: Any): ...
    def loss(self, samples: Any): ...
    def update_itr_hyperparams(self, itr: Any) -> None: ...
    def ul_parameters(self) -> None: ...
    def ul_named_parameters(self) -> None: ...
    def compute_ul_update_schedule(self, itr: Any): ...
    def optim_state_dict(self): ...
    def load_optim_state_dict(self, state_dict: Any) -> None: ...
