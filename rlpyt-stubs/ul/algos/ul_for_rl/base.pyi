from rlpyt.ul.algos.utils.warmup_scheduler import GradualWarmupScheduler as GradualWarmupScheduler
from rlpyt.ul.algos.utils.weight_decay import add_weight_decay as add_weight_decay
from rlpyt.utils.logging import logger as logger
from typing import Any, Optional

class UlAlgorithm:
    opt_info_fields: Any = ...
    def initialize(self) -> None: ...
    def load_replay(self) -> None: ...
    def optimize(self, itr: Any) -> None: ...
    def state_dict(self) -> None: ...
    def load_state_dict(self, state_dict: Any) -> None: ...
    def eval(self) -> None: ...
    def train(self) -> None: ...
    def validation(self) -> None: ...

class BaseUlAlgorithm(UlAlgorithm):
    replay_buffer: Any = ...
    def load_replay(self, pixel_control_buffer: Optional[Any] = ...): ...
    @property
    def replay_T(self): ...
    n_updates: Any = ...
    optimizer: Any = ...
    lr_scheduler: Any = ...
    def optim_initialize(self, n_updates: Any) -> None: ...
    def activation_loss(self, conv_output: Any): ...
