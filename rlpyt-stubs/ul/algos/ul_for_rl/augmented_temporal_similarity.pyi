from collections import namedtuple
from rlpyt.algos.utils import valid_from_done as valid_from_done
from rlpyt.models.mlp import MlpModel as MlpModel
from rlpyt.models.utils import update_state_dict as update_state_dict
from rlpyt.ul.algos.ul_for_rl.base import BaseUlAlgorithm as BaseUlAlgorithm
from rlpyt.ul.algos.utils.data_augs import random_shift as random_shift
from rlpyt.ul.models.ul.encoders import EncoderModel as EncoderModel
from rlpyt.ul.replays.ul_for_rl_replay import UlForRlReplayBuffer as UlForRlReplayBuffer
from rlpyt.utils.buffer import buffer_to as buffer_to
from rlpyt.utils.logging import logger as logger
from rlpyt.utils.quick_args import save__init__args as save__init__args
from rlpyt.utils.tensor import valid_mean as valid_mean
from typing import Any, Optional

OptInfo = namedtuple('OptInfo', ['atsLoss', 'gradNorm', 'convActivation', 'activationLoss'])

ValInfo = namedtuple('ValInfo', ['atsLoss', 'convActivation'])

class AugmentedTemporalSimilarity(BaseUlAlgorithm):
    opt_info_fields: Any = ...
    batch_size: Any = ...
    def __init__(self, replay_filepath: Any, ReplayCls: Any = ..., delta_T: int = ..., batch_T: int = ..., batch_B: int = ..., learning_rate: float = ..., learning_rate_anneal: Optional[Any] = ..., learning_rate_warmup: int = ..., OptimCls: Any = ..., optim_kwargs: Optional[Any] = ..., clip_grad_norm: float = ..., target_update_tau: float = ..., target_update_interval: int = ..., EncoderCls: Any = ..., encoder_kwargs: Optional[Any] = ..., latent_size: int = ..., anchor_hidden_sizes: int = ..., initial_state_dict: Optional[Any] = ..., random_shift_prob: float = ..., random_shift_pad: int = ..., activation_loss_coefficient: float = ..., validation_split: float = ..., n_validation_batches: int = ...) -> None: ...
    device: Any = ...
    encoder: Any = ...
    target_encoder: Any = ...
    predictor: Any = ...
    def initialize(self, n_updates: Any, cuda_idx: Optional[Any] = ...) -> None: ...
    def optimize(self, itr: Any): ...
    def ats_loss(self, samples: Any): ...
    def validation(self, itr: Any): ...
    def state_dict(self): ...
    def load_state_dict(self, state_dict: Any) -> None: ...
    def parameters(self) -> None: ...
    def named_parameters(self) -> None: ...
    def eval(self) -> None: ...
    def train(self) -> None: ...
