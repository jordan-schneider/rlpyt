from collections import namedtuple
from rlpyt.ul.algos.ul_for_rl.base import BaseUlAlgorithm as BaseUlAlgorithm
from rlpyt.ul.models.pixel_control_models import PixelControlModel as PixelControlModel
from rlpyt.ul.models.ul.encoders import EncoderModel as EncoderModel
from rlpyt.ul.replays.ul_for_rl_replay import UlForRlReplayBuffer as UlForRlReplayBuffer
from rlpyt.utils.buffer import buffer_to as buffer_to
from rlpyt.utils.logging import logger as logger
from rlpyt.utils.quick_args import save__init__args as save__init__args
from typing import Any, Optional

OptInfo = namedtuple('OptInfo', ['pcLoss', 'activationLoss', 'gradNorm', 'convActivation'])

ValInfo = namedtuple('ValInfo', ['pcLoss', 'convActivation'])

class PixelControl(BaseUlAlgorithm):
    opt_info_fields: Any = ...
    batch_size: Any = ...
    def __init__(self, batch_T: Any, batch_B: Any, learning_rate: Any, replay_filepath: Any, OptimCls: Any = ..., optim_kwargs: Optional[Any] = ..., initial_state_dict: Optional[Any] = ..., clip_grad_norm: float = ..., EncoderCls: Any = ..., encoder_kwargs: Optional[Any] = ..., ReplayCls: Any = ..., onehot_actions: bool = ..., activation_loss_coefficient: float = ..., learning_rate_anneal: Optional[Any] = ..., learning_rate_warmup: int = ..., PixCtlModelCls: Any = ..., pixel_control_model_kwargs: Optional[Any] = ..., pixel_control_filename: str = ..., validation_split: float = ..., n_validation_batches: int = ...) -> None: ...
    device: Any = ...
    encoder: Any = ...
    pixel_control_model: Any = ...
    def initialize(self, n_updates: Any, cuda_idx: Optional[Any] = ...) -> None: ...
    def load_replay(self): ...
    def optimize(self, itr: Any): ...
    def pixel_control_loss(self, samples: Any): ...
    def validation(self, itr: Any): ...
    def state_dict(self): ...
    def load_state_dict(self, state_dict: Any) -> None: ...
    def parameters(self) -> None: ...
    def named_parameters(self) -> None: ...
    def eval(self) -> None: ...
    def train(self) -> None: ...
