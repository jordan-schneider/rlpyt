from rlpyt.algos.utils import discount_return_n_step as discount_return_n_step
from rlpyt.replays.base import BaseReplayBuffer as BaseReplayBuffer
from rlpyt.replays.non_sequence.frame import PrioritizedReplayFrameBuffer as PrioritizedReplayFrameBuffer, UniformReplayFrameBuffer as UniformReplayFrameBuffer
from rlpyt.replays.sum_tree import SumTree as SumTree
from rlpyt.utils.buffer import buffer_from_example as buffer_from_example, buffer_func as buffer_func, get_leading_dims as get_leading_dims, torchify_buffer as torchify_buffer
from rlpyt.utils.collections import namedarraytuple as namedarraytuple
from rlpyt.utils.misc import extract_sequences as extract_sequences
from typing import Any

SamplesFromReplay: Any

class RlWithUlUniformReplayBuffer(BaseReplayBuffer):
    T: Any = ...
    B: Any = ...
    size: Any = ...
    t: int = ...
    replay_T: Any = ...
    samples: Any = ...
    def __init__(self, example: Any, size: Any, B: Any, replay_T: Any) -> None: ...
    def append_samples(self, samples: Any): ...
    def sample_batch(self, batch_B: Any): ...
    def sample_idxs(self, batch_B: Any): ...
    def extract_batch(self, T_idxs: Any, B_idxs: Any, T: Any): ...
    def extract_observation(self, T_idxs: Any, B_idxs: Any, T: Any): ...

class RlWithUlPrioritizedReplayBuffer(BaseReplayBuffer):
    T: Any = ...
    B: Any = ...
    size: Any = ...
    t: int = ...
    replay_T: Any = ...
    discount: Any = ...
    n_step_return: Any = ...
    alpha: Any = ...
    beta: Any = ...
    samples: Any = ...
    samples_return_: Any = ...
    samples_done_n: Any = ...
    def __init__(self, example: Any, size: Any, B: Any, replay_T: Any, discount: Any, n_step_return: Any, alpha: Any, beta: Any) -> None: ...
    def append_samples(self, samples: Any): ...
    def sample_batch(self, batch_B: Any): ...
    def compute_returns(self, T: Any): ...
    priority_tree: Any = ...
    def init_priority_tree(self) -> None: ...
    def sample_idxs(self, batch_B: Any): ...
    def extract_batch(self, T_idxs: Any, B_idxs: Any, T: Any): ...
    def extract_observation(self, T_idxs: Any, B_idxs: Any, T: Any): ...

class RlWithUlPrioritizedReplayWrapper:
    replay_buffer: Any = ...
    n_step_return: Any = ...
    alpha: Any = ...
    beta: Any = ...
    samples_reward: Any = ...
    samples_return_: Any = ...
    samples_done: Any = ...
    samples_done_n: Any = ...
    def __init__(self, replay_buffer: Any, n_step_return: Any, alpha: Any, beta: Any) -> None: ...
    def sample_batch(self, batch_B: Any, mode: str = ...): ...
    def append_samples(self, samples: Any): ...
    priority_tree: Any = ...
    def init_priority_tree(self) -> None: ...
    def compute_ul_returns(self, T: Any): ...

class DqnWithUlReplayBufferMixin:
    ul_replay_T: Any = ...
    def __init__(self, ul_replay_T: Any, *args: Any, **kwargs: Any) -> None: ...
    def ul_sample_batch(self, batch_B: Any): ...
    def ul_sample_idxs(self, batch_B: Any): ...
    def ul_extract_batch(self, T_idxs: Any, B_idxs: Any, T: Any): ...
    def ul_extract_observation(self, T_idxs: Any, B_idxs: Any, T: Any): ...

class DqnWithUlUniformReplayFrameBuffer(DqnWithUlReplayBufferMixin, UniformReplayFrameBuffer): ...
class DqnWithUlPrioritizedReplayFrameBuffer(DqnWithUlReplayBufferMixin, PrioritizedReplayFrameBuffer): ...
