from rlpyt.runners.base import BaseRunner as BaseRunner
from rlpyt.utils.logging import logger as logger
from rlpyt.utils.prog_bar import ProgBarCounter as ProgBarCounter
from rlpyt.utils.quick_args import save__init__args as save__init__args
from rlpyt.utils.seed import make_seed as make_seed, set_seed as set_seed
from typing import Any, Optional

class UnsupervisedLearning(BaseRunner):
    def __init__(self, algo: Any, n_updates: Any, seed: Optional[Any] = ..., affinity: Optional[Any] = ..., log_interval_updates: float = ..., snapshot_gap_intervals: Optional[Any] = ...) -> None: ...
    seed: Any = ...
    def startup(self) -> None: ...
    pbar: Any = ...
    def initialize_logging(self) -> None: ...
    def shutdown(self) -> None: ...
    def get_itr_snapshot(self, itr: Any): ...
    def save_itr_snapshot(self, itr: Any) -> None: ...
    def store_diagnostics(self, itr: Any, opt_info: Any) -> None: ...
    def log_diagnostics(self, itr: Any, val_info: Any, *args: Any, **kwargs: Any) -> None: ...
    def train(self) -> None: ...
