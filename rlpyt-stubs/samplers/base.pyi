from rlpyt.samplers.collections import BatchSpec as BatchSpec, Samples as Samples, TrajInfo as TrajInfo
from rlpyt.utils.quick_args import save__init__args as save__init__args
from typing import Any, Optional

class BaseSampler:
    alternating: bool = ...
    batch_spec: Any = ...
    mid_batch_reset: Any = ...
    def __init__(self, EnvCls: Any, env_kwargs: Any, batch_T: Any, batch_B: Any, CollectorCls: Any, max_decorrelation_steps: int = ..., TrajInfoCls: Any = ..., eval_n_envs: int = ..., eval_CollectorCls: Optional[Any] = ..., eval_env_kwargs: Optional[Any] = ..., eval_max_steps: Optional[Any] = ..., eval_max_trajectories: Optional[Any] = ...) -> None: ...
    def initialize(self, *args: Any, **kwargs: Any) -> None: ...
    def obtain_samples(self, itr: Any): ...
    def evaluate_agent(self, itr: Any): ...
    def shutdown(self) -> None: ...
    @property
    def batch_size(self): ...
