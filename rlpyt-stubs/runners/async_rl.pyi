from rlpyt.runners.base import BaseRunner as BaseRunner
from rlpyt.utils.collections import AttrDict as AttrDict
from rlpyt.utils.logging import logger as logger
from rlpyt.utils.prog_bar import ProgBarCounter as ProgBarCounter
from rlpyt.utils.quick_args import save__init__args as save__init__args
from rlpyt.utils.seed import make_seed as make_seed, set_seed as set_seed
from rlpyt.utils.synchronize import drain_queue as drain_queue, find_port as find_port
from typing import Any, Optional

THROTTLE_WAIT: float

class AsyncRlBase(BaseRunner):
    def __init__(self, algo: Any, agent: Any, sampler: Any, n_steps: Any, affinity: Any, seed: Optional[Any] = ..., log_interval_steps: float = ...) -> None: ...
    def train(self) -> None: ...
    seed: Any = ...
    sampler_batch_size: Any = ...
    world_size: Any = ...
    def startup(self): ...
    def optim_startup(self): ...
    traj_infos_queue: Any = ...
    ctrl: Any = ...
    def launch_workers(self, n_itr: Any, double_buffer: Any, replay_buffer: Any) -> None: ...
    log_interval_itrs: Any = ...
    n_itr: Any = ...
    def get_n_itr(self): ...
    def build_ctrl(self, world_size: Any): ...
    optimizer_procs: Any = ...
    def launch_optimizer_workers(self, n_itr: Any) -> None: ...
    memcpy_procs: Any = ...
    def launch_memcpy(self, sample_buffers: Any, replay_buffer: Any) -> None: ...
    sampler_proc: Any = ...
    def launch_sampler(self, n_itr: Any) -> None: ...
    def shutdown(self) -> None: ...
    def initialize_logging(self) -> None: ...
    def get_itr_snapshot(self, itr: Any, sampler_itr: Any): ...
    def save_itr_snapshot(self, itr: Any, sample_itr: Any) -> None: ...
    def get_traj_info_kwargs(self): ...
    def store_diagnostics(self, itr: Any, sampler_itr: Any, traj_infos: Any, opt_info: Any) -> None: ...
    pbar: Any = ...
    def log_diagnostics(self, itr: Any, sampler_itr: Any, throttle_time: Any, prefix: str = ...) -> None: ...

class AsyncRl(AsyncRlBase):
    log_traj_window: Any = ...
    def __init__(self, *args: Any, log_traj_window: int = ..., **kwargs: Any) -> None: ...
    pbar: Any = ...
    def initialize_logging(self) -> None: ...
    def store_diagnostics(self, itr: Any, sampler_itr: Any, traj_infos: Any, opt_info: Any) -> None: ...
    def log_diagnostics(self, itr: Any, sampler_itr: Any, throttle_time: Any, prefix: str = ...) -> None: ...

class AsyncRlEval(AsyncRlBase):
    pbar: Any = ...
    def initialize_logging(self) -> None: ...
    def log_diagnostics(self, itr: Any, sampler_itr: Any, throttle_time: Any, prefix: str = ...) -> None: ...

class AsyncOptWorker:
    def __init__(self, rank: Any, world_size: Any, algo: Any, agent: Any, n_itr: Any, affinity: Any, seed: Any, ctrl: Any, port: Any) -> None: ...
    def optimize(self) -> None: ...
    def startup(self) -> None: ...
    def shutdown(self) -> None: ...

def run_async_sampler(sampler: Any, affinity: Any, ctrl: Any, traj_infos_queue: Any, n_itr: Any) -> None: ...
def run_async_sampler_eval(sampler: Any, affinity: Any, ctrl: Any, traj_infos_queue: Any, n_itr: Any, eval_itrs: Any) -> None: ...
def memory_copier(sample_buffer: Any, samples_to_buffer: Any, replay_buffer: Any, ctrl: Any) -> None: ...
def placeholder(x: Any) -> None: ...
