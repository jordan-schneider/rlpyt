from rlpyt.runners.base import BaseRunner as BaseRunner
from rlpyt.utils.logging import logger as logger
from rlpyt.utils.prog_bar import ProgBarCounter as ProgBarCounter
from rlpyt.utils.quick_args import save__init__args as save__init__args
from rlpyt.utils.seed import make_seed as make_seed, set_seed as set_seed
from typing import Any, Optional

class MinibatchRlBase(BaseRunner):
    min_itr_learn: Any = ...
    def __init__(self, algo: Any, agent: Any, sampler: Any, n_steps: Any, seed: Optional[Any] = ..., affinity: Optional[Any] = ..., log_interval_steps: float = ...) -> None: ...
    seed: Any = ...
    rank: Any = ...
    world_size: Any = ...
    itr_batch_size: Any = ...
    def startup(self): ...
    def get_traj_info_kwargs(self): ...
    log_interval_itrs: Any = ...
    n_itr: Any = ...
    def get_n_itr(self): ...
    def initialize_logging(self) -> None: ...
    def shutdown(self) -> None: ...
    def get_itr_snapshot(self, itr: Any): ...
    def save_itr_snapshot(self, itr: Any) -> None: ...
    def store_diagnostics(self, itr: Any, traj_infos: Any, opt_info: Any) -> None: ...
    pbar: Any = ...
    def log_diagnostics(self, itr: Any, traj_infos: Optional[Any] = ..., eval_time: int = ..., prefix: str = ...) -> None: ...

class MinibatchRl(MinibatchRlBase):
    log_traj_window: Any = ...
    def __init__(self, log_traj_window: int = ..., **kwargs: Any) -> None: ...
    def train(self) -> None: ...
    pbar: Any = ...
    def initialize_logging(self) -> None: ...
    def store_diagnostics(self, itr: Any, traj_infos: Any, opt_info: Any) -> None: ...
    def log_diagnostics(self, itr: Any, prefix: str = ...) -> None: ...

class MinibatchRlEval(MinibatchRlBase):
    def train(self) -> None: ...
    def evaluate_agent(self, itr: Any): ...
    def initialize_logging(self) -> None: ...
    def log_diagnostics(self, itr: Any, eval_traj_infos: Any, eval_time: Any, prefix: str = ...) -> None: ...
